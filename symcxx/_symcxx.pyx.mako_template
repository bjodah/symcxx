# -*- coding: utf-8 -*-
# -*- ${'mode: read-only'} -*-
# distutils: language = c++
# distutils: extra_compile_args = -std=c++11
<%doc>
# This is a templated source file.
# Render template using Mako (Python templating engine)
</%doc>
# ${_message_for_rendered}

from libc.stdint cimport int64_t
from libcpp cimport bool
from libcpp.vector cimport vector
from libcpp.string cimport string
from libcpp.memory cimport unique_ptr

ctypedef unsigned int idx_t

from functools import reduce
from operator import mul
import itertools
import sys

from cython.operator import dereference as deref
import numpy as np


cdef extern from "symcxx/core.hpp" namespace "symcxx":
    cdef cppclass Kind:
        pass

cdef extern from "symcxx/core.hpp" namespace "symcxx::Kind":
%for Cls, Parent, meth in types:
    cdef Kind ${Cls}
%endfor


cdef extern from "symcxx/core.hpp" namespace "symcxx":
    cdef cppclass idx_pair_t:
        idx_t first;
        idx_t second;

    cdef union data_t:
        const idx_pair_t idx_pair;
        const int64_t intgr;
        const double dble;

    cdef cppclass Basic:
        const data_t data;
        # const Kind kind;
        # const hash_t hash;
        const NameSpace * const ns;

    cdef cppclass NameSpace:
        idx_t n_symbs

        const idx_t pi_id
        const idx_t neg_pi_id
        const idx_t e_id
        const idx_t neg_e_id

        NameSpace(idx_t)
        bool has(idx_t, idx_t)
        bool equal(idx_t, idx_t)
        idx_t make_symbol(idx_t) except +
        idx_t make_integer(int)
        idx_t make_float(double)
        idx_t make_nan()
        idx_t make_matrix(idx_t, idx_t, vector[idx_t]) except +
        idx_t matrix_jacobian(idx_t, idx_t) except +
        void matrix_evalf(idx_t, const double * const, double * const) except +
        idx_t matrix_get_nr(idx_t) const
        idx_t matrix_get_nc(idx_t) const
        idx_t matrix_get_elem(idx_t, idx_t, idx_t) const

        idx_t factor(idx_t) except +

        string print_node(const idx_t, vector[string]&) except +
        string print_ast(const idx_t, vector[string]&) except +

        unique_ptr[NameSpace] rebuild_from_matrix(const vector[idx_t]&, idx_t)
        idx_t get_instances_size()
        idx_t create(Kind, vector[idx_t]) except +
        idx_t create(Kind, idx_t) except +
        idx_t create(Kind, idx_t, idx_t) except +

        double evalf(idx_t, const double *) except +
        bool evalb(idx_t, const double *) except +
        idx_t diff(const idx_t, const idx_t) except +

%for Cls, Parent, meth in types_nonatomic_unary:
        idx_t ${meth}(idx_t)
%endfor

%for Cls, Parent, meth in types_nonatomic_binary:
        idx_t ${meth}(idx_t, idx_t)
%endfor

%for Cls, Parent, meth in types_nonatomic_args_stack:
        idx_t ${meth}(vector[idx_t])
%endfor

    cdef unique_ptr[NameSpace] make_unique_NameSpace(const idx_t)


cdef class _Matrix(object):

    cdef readonly idx_t idx
    cdef readonly object ns
    cdef public object flat_output

    def __init__(self, idx_t idx, namespace, flat_output=False):
        self.idx = idx
        self.ns = namespace
        self.flat_output = flat_output

    @property
    def shape(self):
        return (self.ns.matrix_get_nr(self.idx),
                self.ns.matrix_get_nc(self.idx))

    @property
    def size(self):
        return self.shape[0]*self.shape[1]


    @property
    def flat(self):
        for ri in range(self.ns.matrix_get_nr(self.idx)):
            for ci in range(self.ns.matrix_get_nc(self.idx)):
                yield self[ri, ci]

    def __getitem__(self, key):
        ri, ci = key
        return _IndexedObject(self.ns.matrix_get_elem(self.idx, ri, ci), self.ns)

    def tolist(self):
        return [[self[ri, ci] for ci in range(self.ns.matrix_get_nr(self.idx))]
                for ri in range(self.ns.matrix_get_nc(self.idx))]

    def jacobian(self, other):
        return _Matrix(self.ns.matrix_jacobian(self.idx, other.idx), self.ns)

    def eval_float(self, inp, out=None):
        inp = np.asarray(inp)
        inp_shape = inp.shape
        inp_size = reduce(mul, inp_shape)
        nx = self.ns.n_symbs
        if inp_size % nx != 0:
            raise TypeError("Broadcasting failed")
        nbroadcast = inp_size // nx
        if nbroadcast > 1 and nx == 1 and inp_shape[-1] != 1:
            inp_shape = inp_shape + (1,)  # Implicit reshape
        out_shape = inp_shape[:-1] + self.shape
        out_size = nbroadcast * reduce(mul, self.shape)

        if out is None:
            out = np.empty(out_shape)
        else:
            if out.size != reduce(mul, out_shape):
                raise ValueError("Incompatibel shape of out")
        local_out = np.ravel(out)
        inp = np.ravel(np.ascontiguousarray(inp, dtype=np.float64))
        if nbroadcast == 1:
            self.ns.matrix_evalf(self.idx, inp, local_out)
        else:
            for ib in range(nbroadcast):
                self.ns.matrix_evalf(self.idx, inp[ib*nx:(ib+1)*nx],
                                     local_out[ib*self.size:(ib+1)*self.size])
        if self.flat_output:
            return local_out.reshape(out_shape[:-2] +
                                     (out_shape[-2]*out_shape[-1],))
        else:
            return local_out.reshape(out_shape)

    def __str__(self):
        rows = ['[' + ', '.join(
            [str(self[ri, ci]) for ci in range(self.shape[1])]
        ) + ']' for ri in range(self.shape[0])]
        return '[' + ',\n '.join(rows) + ']'


class _IndexedObject(object):

    def __init__(self, idx, namespace, **kwargs):
        self.idx = idx
        self.ns = namespace
        self.__dict__.update(kwargs)

    def __eq__(self, other):
        other = _implicit_conversion(self.ns, other)
        if self.idx == other.idx and self.ns == other.ns:
            return True
        else:
            print("Running self.ns.equal")  # DO-NOT-MERGE!
            return self.ns.equal(self.idx, other.idx)

    def __str__(self):
        return self.ns.print_ast(self.idx).decode('utf-8')

    def __add__(self, other):
        other = _implicit_conversion(self.ns, other)
        return _IndexedObject(self.ns._Add2(self.idx, other.idx), self.ns)

    def __radd__(self, other):
        other = _implicit_conversion(self.ns, other)
        return _IndexedObject(self.ns._Add2(other.idx, self.idx), self.ns)

    def __sub__(self, other):
        other = _implicit_conversion(self.ns, other)
        return _IndexedObject(self.ns._Sub(self.idx, other.idx), self.ns)

    def __rsub__(self, other):
        other = _implicit_conversion(self.ns, other)
        return _IndexedObject(self.ns._Sub(other.idx, self.idx), self.ns)

    def __neg__(self):
        return _IndexedObject(self.ns._Neg(self.idx), self.ns)

    def __mul__(self, other):
        other = _implicit_conversion(self.ns, other)
        return _IndexedObject(self.ns._Mul2(self.idx, other.idx), self.ns)

    def __rmul__(self, other):
        other = _implicit_conversion(self.ns, other)
        return _IndexedObject(self.ns._Mul2(other.idx, self.idx), self.ns)

    def __truediv__(self, other):
        other = _implicit_conversion(self.ns, other)
        return _IndexedObject(self.ns._Div(self.idx, other.idx), self.ns)

    def __rtruediv__(self, other):
        other = _implicit_conversion(self.ns, other)
        return _IndexedObject(self.ns._Div(other.idx, self.idx), self.ns)

    def __pow__(self, exponent):
        exponent = _implicit_conversion(self.ns, exponent)
        return _IndexedObject(self.ns._Pow(self.idx, exponent.idx), self.ns)

    def __richcmp__(x, y, int op):
        y = _implicit_conversion(x.ns, y)
        if op == 0:
            return _IndexedObject(x.ns._Lt(x.idx, y.idx), x.ns)
        elif op == 1:
            return _IndexedObject(x.ns._Le(x.idx, y.idx), x.ns)
        elif op == 2:
            return _IndexedObject(x.ns._Eq(x.idx, y.idx), x.ns)
        elif op == 3:
            return _IndexedObject(x.ns._Ne(x.idx, y.idx), x.ns)
        elif op == 4:
            return _IndexedObject(x.ns._Gt(x.idx, y.idx), x.ns)
        elif op == 5:
            return _IndexedObject(x.ns._Ge(x.idx, y.idx), x.ns)
        else:
            raise NotImplementedError("Unknown richcmp op")

    def evalb(self, inp):
        return self.ns.evalb(self.idx, inp)

    def evalf(self, inp):
        return self.ns.evalf(self.idx, inp)

    def diff(self, wrt):
        return _IndexedObject(self.ns.diff(self.idx, wrt.idx), self.ns)

    def has(self, other):
        other = _implicit_conversion(self.ns, other)
        return self.ns.has(self.idx, other.idx)


def _implicit_conversion(ns, other):
    if isinstance(other, _IndexedObject):  # or look for 'ns' and 'idx'?
        assert other.ns == ns
        return other
    elif isinstance(other, int):
        return _IndexedObject(ns.make_integer(other), ns)
    elif isinstance(other, float):
        return _IndexedObject(ns.make_float(other), ns)
    else:
        raise NotImplementedError


cdef class PyNameSpace:
    cdef unique_ptr[NameSpace] thisptr
    cdef readonly vector[string] symbol_names
    cdef readonly object pi, neg_pi, E, neg_E
    cdef idx_t dummy_counter

    def __cinit__(self, idx_t n=0, alloc=True):
        self.dummy_counter = 0
        if alloc:
            self.thisptr = make_unique_NameSpace(n)

    def __init__(self, *args, **kwargs):
        self.pi = _IndexedObject(deref(self.thisptr).pi_id, self)
        self.neg_pi = _IndexedObject(deref(self.thisptr).neg_pi_id, self)
        self.E = _IndexedObject(deref(self.thisptr).e_id, self)
        self.neg_E = _IndexedObject(deref(self.thisptr).neg_e_id, self)

    property n_symbs:
        def __get__(self):
            return deref(self.thisptr).n_symbs

    def has(self, inst_idx, looking_for_idx):
        return deref(self.thisptr).has(inst_idx, looking_for_idx)

    def equal(self, idx_a, idx_b):
        return deref(self.thisptr).equal(idx_a, idx_b)

    def make_symbol(self, symb_idx):
        return deref(self.thisptr).make_symbol(symb_idx)

    def make_integer(self, intgr):
        return deref(self.thisptr).make_integer(intgr)

    def make_float(self, double dble):
        return deref(self.thisptr).make_float(dble)

    def make_nan(self):
        return deref(self.thisptr).make_nan()

    def make_matrix(self, nr, nc, data):
        return deref(self.thisptr).make_matrix(nr, nc, data)

    def matrix_jacobian(self, y, dx):
        return deref(self.thisptr).matrix_jacobian(y, dx)

    def matrix_get_nr(self, idx_t idx):
        return deref(self.thisptr).matrix_get_nr(idx)

    def matrix_get_nc(self, idx_t idx):
        return deref(self.thisptr).matrix_get_nc(idx)

    def matrix_get_elem(self, idx_t idx, idx_t ri, idx_t ci):
        return deref(self.thisptr).matrix_get_elem(idx, ri, ci)

    def matrix_evalf(self, idx_t idx, double[::1] inp, double[::1] out):
        mat_size = self.matrix_get_nr(idx) * self.matrix_get_nc(idx)
        if inp.size < deref(self.thisptr).n_symbs or out.size < mat_size:
            raise TypeError("Insufficient length")
        deref(self.thisptr).matrix_evalf(idx, &inp[0] if inp.size > 0 else NULL,
                                         &out[0] if out.size > 0 else NULL)

    def _factor(self, idx_t idx):
        return deref(self.thisptr).factor(idx)

    property n_instances:
        def __get__(self):
            return deref(self.thisptr).get_instances_size()

    def print_node(self, idx):
        return deref(self.thisptr).print_node(idx, [])  # self.symbol_names)

    def print_ast(self, idx):
        return deref(self.thisptr).print_ast(idx, self.symbol_names)

    def evalb(self, idx_t idx, double [::1] inp):
        return deref(self.thisptr).evalb(idx, &inp[0] if inp.size > 0 else NULL)

    def evalf(self, idx_t idx, double [::1] inp):
        return deref(self.thisptr).evalf(idx, &inp[0] if inp.size > 0 else NULL)

    def diff(self, idx0, idx1):
        return deref(self.thisptr).diff(idx0, idx1)

    # Unary:
%for Cls, Parent, meth in types_nonatomic_unary:
    def _${Cls}(self, idx_t idx):
        return deref(self.thisptr).create(<Kind>${Cls}, idx)

    def ${meth}(self, obj):
        obj = _implicit_conversion(self, obj)
        return _IndexedObject(self._${Cls}(obj.idx), self)
%endfor

    # Binary:
%for Cls, Parent, meth in types_nonatomic_binary:
    def _${Cls}(self, idx_t idx0, idx_t idx1):
        return deref(self.thisptr).create(<Kind>${Cls}, idx0, idx1)

    def ${meth}(self, obj0, obj1):
        obj0 = _implicit_conversion(self, obj0)
        obj1 = _implicit_conversion(self, obj1)
        return _IndexedObject(self._${Cls}(obj0.idx, obj1.idx), self)
%endfor

    # Vector arguments
%for Cls, Parent, meth in types_nonatomic_args_stack:
    def _${Cls}(self, vector[idx_t] idxs):
        return deref(self.thisptr).create(<Kind>${Cls}, idxs)

    def ${meth}(self, *objs):
        return _IndexedObject(self._${Cls}([
            _implicit_conversion(self, obj).idx for obj in objs]), self)
%endfor

    def Number(self, val):
        if isinstance(val, int):
            return _IndexedObject(self.make_integer(val), self)
        else:
            return _IndexedObject(self.make_float(val), self)

    def factor(self, number):
        return _IndexedObject(self._factor(number.idx), self)

    def Symbol(self, name):
        cdef string _name = name.encode('utf-8')
        try:
            symb_nr = self.symbol_names.index(_name)
        except ValueError:  # name not in list
            symb_nr = self.symbol_names.size()
            self.symbol_names.push_back(_name)
        symb_idx = self.make_symbol(symb_nr)
        return _IndexedObject(symb_idx, self)

    def Dummy(self):
        self.dummy_counter += 1
        return self.Symbol('dummy%d' % (self.dummy_counter - 1))

    def symarray(self, prefix, shape, real=True):
        if real is not True:
            raise NotImplementedError
        arr = np.empty(shape, dtype=object)
        for index in np.ndindex(shape):
            arr[index] = self.Symbol('%s_%s' % (
                prefix, '_'.join(map(str, index))))
        return arr

    def Matrix(self, nr, nc, source, flat_output=False):
        if callable(source):
            callback = source
        else:
            def callback(ri, ci):
                try:
                    elem = source[ri, ci]
                except (TypeError, IndexError):
                    try:
                        elem = source[ri][ci]
                    except TypeError:
                        elem = source[ri*nc + ci]  # row-major order
                return _implicit_conversion(self, elem).idx
        data = [callback(ri, ci) for ri, ci
                in itertools.product(range(nr), range(nc))]
        mat_idx = self.make_matrix(nr, nc, data)
        return _Matrix(mat_idx, self, flat_output)

    cdef _Matrix rebuild(self, args, _Matrix mtx, flat_output=False):
        cdef PyNameSpace new_ns = PyNameSpace(alloc=False)
        new_ns.thisptr = deref(self.thisptr).rebuild_from_matrix(
            [arg.idx for arg in args], mtx.idx)
        return _Matrix(deref(new_ns.thisptr).get_instances_size() - 1,
                       new_ns, flat_output)

    def rebuild_debug(self, args, mtx):
        return self.rebuild(args, mtx)

    def Lambdify(self, args, exprs):
        flat_output = False
        if not isinstance(exprs, _Matrix):
            try:
                exprs = self.Matrix(*exprs.shape, exprs)
            except AttributeError:
                try:
                    exprs = self.Matrix(len(exprs), 1, exprs)
                    flat_output = True
                except TypeError:
                    exprs = self.Matrix(1, 1, [exprs])  # single expression
        try:
            args = args.flat
        except AttributeError:
            try:
                len(args)
            except TypeError:
                args = [args]  # single arg
        mtx = self.rebuild(args, exprs, flat_output=flat_output)
        return mtx.eval_float

    def lambdify(self, args, exprs):
        Lmb = self.Lambdify(args, exprs)
        return lambda *args: Lmb(args)

    def symbols(self, args):
        lst = [self.Symbol(arg) for arg in args.split()]
        if len(lst) == 0:
            raise ValueError('no symbols given')
        elif len(lst) == 1:
            return lst[0]
        else:
            return tuple(lst)
